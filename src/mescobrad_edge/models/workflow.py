# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mescobrad_edge.models.base_model_ import Model
from mescobrad_edge.models.operation import Operation
from mescobrad_edge import util


class Workflow(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, execution_interval: str=None, last_run: str=None, operations: List[Operation]=None):  # noqa: E501
        """Workflow - a model defined in Swagger

        :param id: The id of this Workflow.  # noqa: E501
        :type id: str
        :param name: The name of this Workflow.  # noqa: E501
        :type name: str
        :param execution_interval: The execution_interval of this Workflow.  # noqa: E501
        :type execution_interval: str
        :param last_run: The last_run of this Workflow.  # noqa: E501
        :type last_run: str
        :param operations: The operations of this Workflow.  # noqa: E501
        :type operations: List[Operation]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'execution_interval': str,
            'last_run': str,
            'operations': List[Operation]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'execution_interval': 'execution_interval',
            'last_run': 'last_run',
            'operations': 'operations'
        }

        self._id = id
        self._name = name
        self._execution_interval = execution_interval
        self._last_run = last_run
        self._operations = operations

    @classmethod
    def from_dict(cls, dikt) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workflow of this Workflow.  # noqa: E501
        :rtype: Workflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Workflow.


        :return: The id of this Workflow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Workflow.


        :param id: The id of this Workflow.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Workflow.


        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workflow.


        :param name: The name of this Workflow.
        :type name: str
        """

        self._name = name

    @property
    def execution_interval(self) -> str:
        """Gets the execution_interval of this Workflow.


        :return: The execution_interval of this Workflow.
        :rtype: str
        """
        return self._execution_interval

    @execution_interval.setter
    def execution_interval(self, execution_interval: str):
        """Sets the execution_interval of this Workflow.


        :param execution_interval: The execution_interval of this Workflow.
        :type execution_interval: str
        """

        self._execution_interval = execution_interval

    @property
    def last_run(self) -> str:
        """Gets the last_run of this Workflow.


        :return: The last_run of this Workflow.
        :rtype: str
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run: str):
        """Sets the last_run of this Workflow.


        :param last_run: The last_run of this Workflow.
        :type last_run: str
        """

        self._last_run = last_run

    @property
    def operations(self) -> List[Operation]:
        """Gets the operations of this Workflow.


        :return: The operations of this Workflow.
        :rtype: List[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations: List[Operation]):
        """Sets the operations of this Workflow.


        :param operations: The operations of this Workflow.
        :type operations: List[Operation]
        """

        self._operations = operations
